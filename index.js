const express = require("express");
const mysql = require("mysql2/promise");
const Redis = require("ioredis");

const app = express();
const PORT = 3000;

// K·∫øt n·ªëi MySQL (d√πng bi·∫øn m√¥i tr∆∞·ªùng t·ª´ docker-compose)
console.log("Connecting to MySQL at:", process.env.MYSQL_HOST, process.env.MYSQL_USER, process.env.MYSQL_DATABASE, process.env.MYSQL_PASSWORD);
const db = mysql.createPool({
  host: process.env.MYSQL_HOST || "localhost",
  user: process.env.MYSQL_USER || "root",
  password: process.env.MYSQL_PASSWORD || "password",
  database: process.env.MYSQL_DATABASE || "game_db"
});

// K·∫øt n·ªëi Redis
const redis = new Redis({
  host: process.env.REDIS_HOST || "redis",
  port: process.env.REDIS_PORT || 6379,
});

// Kh·ªüi t·∫°o players
let players = [
  { id: 1, name: "Player 1", score: 0, clicks: 0, time: 0, gameOver: false },
  { id: 2, name: "Player 2", score: 0, clicks: 0, time: 0, gameOver: false },
];

let gameLoop;

// Gi·∫£ l·∫≠p tƒÉng ƒëi·ªÉm
async function simulateGame() {
  players.forEach((p) => {
    if (!p.gameOver) {
      p.score += Math.floor(Math.random() * 10);
      p.clicks += 1;
      p.time += 1;

      if (p.score >= 10) {
        p.gameOver = true;
        console.log(`${p.name} GAME OVER at score ${p.score}`);
      }
    }
  });

  // C·∫≠p nh·∫≠t v√†o Redis
  await redis.set("players", JSON.stringify(players));

  console.log(players);

  // N·∫øu c·∫£ 2 player game over th√¨ d·ª´ng
  if (players.every((p) => p.gameOver)) {
    console.log("C·∫£ 2 player ƒë√£ game over ‚Üí D·ª´ng game");
    clearInterval(gameLoop);
    saveScores();
  }
}

// L∆∞u ƒëi·ªÉm s·ªë t·ª´ Redis v√†o MySQL
async function saveScores() {
  try {
    const data = await redis.get("players");
    const finalPlayers = JSON.parse(data);

    for (let p of finalPlayers) {
      await db.query(
        "INSERT INTO game_results (player_name, score, duration_seconds, max_consecutive_presses) VALUES (?, ?, ?, ?)",
        [p.name, p.score, p.time, p.clicks]
      );
    }
    console.log("‚úÖ ƒê√£ l∆∞u ƒëi·ªÉm s·ªë v√†o MySQL t·ª´ Redis");
  } catch (err) {
    console.error("‚ùå L·ªói khi l∆∞u ƒëi·ªÉm:", err);
  }
}

// API hi·ªÉn th·ªã ƒëi·ªÉm s·ªë hi·ªán t·∫°i (t·ª´ Redis)
app.get("/score", async (req, res) => {
  const data = await redis.get("players");
  if (data) {
    res.json(JSON.parse(data));
  } else {
    res.json(players);
  }
});

// Kh·ªüi ƒë·ªông server v√† game
app.listen(PORT, () => {
  console.log(`üöÄ Server running at http://localhost:${PORT}`);

  // B·∫Øt ƒë·∫ßu game loop m·ªói gi√¢y
  gameLoop = setInterval(simulateGame, 1000);

  // Sau 2 ph√∫t (120 gi√¢y) th√¨ d·ª´ng v√† l∆∞u
  setTimeout(() => {
    console.log("‚è∞ H·∫øt 2 ph√∫t ‚Üí Ghi ƒëi·ªÉm v√†o DB");
    clearInterval(gameLoop);
    saveScores();
  }, 120000);
});
